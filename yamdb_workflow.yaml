name: yamdb_workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt 

    - name: Test with flake8 and django tests
      run: |
        python -m flake8
    - name: generate env
      run: |
        touch .env
        echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
        echo DB_NAME=${{ secrets.DB_NAME }} >> .env
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
        echo DB_HOST=${{ secrets.DB_HOST }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
    - name: Task test (pytest)
      run: |
        pytest
        

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 # Проверяет доступность репозитория DockerHub для workflow
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 # Вызывает сборщик контейнеров docker
      - name: Login to Docker 
        uses: docker/login-action@v1 # Запуск скрипта авторизации на DockerHub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 # Выполняет push образа в DockerHub 
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/yamdb_final:latest 

  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}
            stack_file_name: docker-compose.yaml
            script: |
              sudo apt remove docker docker-engine docker.io containerd runc
              sudo apt update
              # обновить список пакетов

              sudo apt install \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg-agent \
                software-properties-common -y
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# ОК
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt update 
              sudo apt install docker-ce docker-compose -y 
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yamdb_final
              sudo docker-compose stop
              sudo docker-compose rm web
              touch .env
              echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
              echo DB_NAME=${{ secrets.DB_NAME }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo DB_HOST=${{ secrets.DB_HOST }} >> .env
              echo DB_PORT=${{ secrets.DB_PORT }} >> .env
              sudo docker-compose up -d 
              docker-compose exec web python manage.py migrate --noinput
              docker-compose exec web python manage.py collectstatic --no-input 

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!